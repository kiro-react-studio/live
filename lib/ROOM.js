var ROOM=function(){"use strict";class e{constructor(e={}){this.listeners={},this.info=e}static defaultOnChange(e){console.log("onChange",e)}static defaultOnClick(e){console.log("onClick",e)}on(e,t){t.constructor===Function&&(this.listeners[e]=t)}emit(e,t){this.listeners[e]&&this.listeners[e](t)}}class t extends e{constructor(e={}){super(e),this.reset()}init(){window.addEventListener("beforeunload",this.beforeunload.bind(this))}reset(){this.inited=!1,this.ws&&(this.ws.onopen=null,this.ws.onmessage=null,this.ws.onerror=null,this.ws.onclose=null,this.ws.readyState===WebSocket.OPEN&&this.ws.close(),this.ws=null)}beforeunload(){this.inited&&this.unload()}connect(e={}){let{url:t}=e;!this.inited&&t&&(this.url=t,this.initSignal())}initSignal(){let e=this;var t=this.ws=new WebSocket(`wss://${this.url}`);t.onopen=(()=>{e.inited=!0,console.log("websocket connected"),this.emit("connected",{status:!0,data:{wss:this.ws.url}})}),t.onmessage=(t=>{let s=t.data||null;switch((s=JSON.parse(s)).type){case"self":e.onself(s.data);break;case"sys":e.onsys(s.data);break;case"peer":e.onPeer(s.data)}}),t.onclose=(()=>{e.inited=!1,console.log("Signal connection lost"),e.isReconect=!0,e.emit("close")});let s=t.send;t.send=function(e){t.readyState===WebSocket.OPEN&&(s.call(this,JSON.stringify(e)),"heart"!==e.type&&console.log(`websocket send: ${e.type}`,e.data))}}onself(e){const{type:t,code:s,data:i}=e;"heart"!==t&&console.log(`${t} ${200===s?"success":"failed"}`),this.emit(t,{status:200===s,data:i})}onsys(e){"roomlist"===e.type&&this.emit("roomlist",e.data),200===e.code&&"in"===e.type&&this.emit("join"),200===e.code&&"out"===e.type&&this.emit("leave",e.data)}sendPeer(){this.ws.send({type:"peer",data:{status:"ready",data:222}})}onPeer(e){e.type&&this.emit(e.type,e.data)}send(e,t){"connected"!==e&&this.ws.send({type:e,data:t})}join(e){e&&this.ws.send({type:"join",data:{roomId:e}})}leave(e={}){const{userId:t,roomId:s}=e;s&&t&&this.ws.send({type:"leave",data:{userId:t,roomId:s}})}unload(){this.ws.send({type:"unload"})}destroy(){this.ws&&(this.ws.send({type:"leave",data:{userId:userId,roomId:roomId}}),this.reset())}}const s=5;class i extends e{constructor(e={}){super(e),this.reset()}reset(){this.stop(),this.cleanTimer(),this.timers={},this.response={},this.signal=null,this.reConnectCount=0,this.reConnecting=!1}init(e){return this.signal||this.initSignal(),this.option=e,this.connect()}initSignal(){const e=this.signal=new t;e.on("connected",this.onConnected.bind(this)),e.on("heart",this.onHeartBeat.bind(this)),e.on("login",this.onLogin.bind(this)),e.on("create",this.onCreate.bind(this)),e.on("join",this.onJoin.bind(this)),e.on("leave",this.onLeave.bind(this)),e.on("close",this.onClose.bind(this)),e.on("roomlist",this.onRoomList.bind(this))}cleanTimer(e){if(e)return clearInterval(e);this.timers&&Object.keys(this.timers).map(e=>{clearInterval(this.timers[e])})}onConnected(e){console.log("signal connected"),this.response.connected.data=e,this.emit("connected")}onLogin(e){console.log("signal logined"),this.im=e.data,this.response.login.data=e,this.heartbeat()}onCreate(e){this.emit("create",e),this.response.create.data=e}onJoin(e){console.log("user join",e),this.response.join.data=e}onLeave(e){console.log("user leave",e)}onClose(e){console.log("signal close",e),this.onSignalLost(e)}onSignalTimeout(e){console.log("signal timeout",e),this.onSignalLost(e)}onSignalLost(e){this.reConnecting||(this.emit("reConnecting"),this.reConnectCount>=s?this.emit("close"):(this.reConnecting=!0,++this.reConnectCount,console.log("signal reconnect ",this.reConnectCount),this.connect().then(()=>{this.reConnecting=!1,this.reConnectCount=0}).catch(e=>{console.error(e),this.reConnecting=!1,this.onClose()})))}onRoomList(e){console.log("room list",e),this.emit("roomlist",e)}connect(){const e=this.option;return this.signal.connect(e),this.promise({type:"connected",data:e,timeout:5}).then(t=>this.login(e))}login(e){return this.promise({type:"login",data:e})}create(e={}){const{roomName:t,uid:s}=e;return t&&s?this.promise({type:"create",data:e}):Promise.reject("create room error: name or uid missing")}join(e={}){const{uid:t,roomId:s}=e;return s&&t?this.promise({type:"join",data:e}):Promise.reject("join room error: roomId or uid missing")}leave(){this.signal&&this.signal.send("leave")}stop(){this.signal&&this.signal.send("leave")}destroy(){this.signal&&this.signal.destroy()}promise(e={}){const{type:t,timeout:s=30,data:i}=e,n=this.response[t]={};return"connected"!==t&&this.signal.ws.readyState!==WebSocket.OPEN?Promise.reject({error:"操作失败,通信已经断开"}):(this.signal.send(t,i),new Promise((e,i)=>{const o=Date.now();n.timer=setInterval(()=>{if(n.data)return clearInterval(n.timer),n.timer=null,void e(n.data);!n.data&&Date.now()-o>=1e3*s&&(clearInterval(n.timer),n.timer=null,i({error:`${t} timeout`}))},1e3)}))}sendHeart(e){this.signal&&this.signal.send("heart",e)}heartbeat(){this.isHeartBeating||(this.heartBeatList=[],this.bindHearBeat(5))}onHeartBeat(e){this.heartBeatList.shift(),this.bindHearBeat(5)}heartBeatHandler(){const e=this.im,t=this.heartBeatList;if(!t)return;const s=Date.now();if(t.constructor===Array&&0===t.length){t.push(s);const i=Object.assign(e,{time:s});return this.sendHeart(i),void this.bindHearBeat(5)}const i=Date.now()-t[0];if(i>3e4)console.error("socket heartbeat timeout"),this.onSignalTimeout();else if(i>2e3&&i<3e4){console.warn("socket no response, keep heartbeat"),t.push(s);const i=Object.assign(e,{time:s});this.sendHeart(i),this.bindHearBeat(2)}}bindHearBeat(e){this.isHeartBeating&&clearTimeout(this.isHeartBeating),this.isHeartBeating=setTimeout(this.heartBeatHandler.bind(this),1e3*e)}stopHeartBeat(){this.isHeartBeating&&(this.isHeartBeating&&clearTimeout(this.isHeartBeating),this.heartBeatTimer&&clearInterval(this.heartBeatTimer),this.isHeartBeating=null,this.heartBeatTimer=null,this.heartBeatList=null,this.heartBeatCount=0)}}return i.supportedListeners={ready:"连接成功的回调",connected:"点对点webrtc连接成功的回调",stream:"收到远端流",data:"收到远端datachannel数据",stop:"连接断开",leave:"对方离开",text:"收到纯文本消息",message:"收到聊天信息",command:"收到指令",notify:"收到通知",sendFile:"文件发送中的实时状态",receiveFile:"文件接收中的实时状态",sendBuffer:"发送ArrayBuffer实时状态",receiveBuffer:"接收ArrayBuffer实时状态",sendBlob:"发送Blob实时状态",receiveBlob:"接收Blob实时状态"},i}();
